% range_types = ['CountableRange', 'CountableClosedRange', 'Range', 'ClosedRange']
import XCTest
@testable import RangeContains

class RangeTests: XCTestCase {
    % first = True
    % for range_type_1 in range_types:
    %     closed_1 = 'Closed' in range_type_1
    %     countable_1 = 'Countable' in range_type_1
    %     if first:
    %         first = False
    %     else:

    %     end
    func test${range_type_1}Contains() {
        % first_2 = True
        % for bound_type in ['Int'] if countable_1 else ['Int', 'Float']:
        %     if first_2:
        %         first_2 = False
        %     else:

        %     end
        do {
            let a: ${range_type_1}<${bound_type}> = 2${'...' if closed_1 else '..<'}7
            % for lower, upper in [(3, 5), (2, 5), (3, 7), (2, 7), (1, 5), (3, 8), (3, 9), (11, 11)]:

            %     for range_type_2 in range_types if bound_type == 'Int' else [r for r in range_types if 'Countable' not in r]:
            %         closed_2 = 'Closed' in range_type_2
            do {
                let b: ${range_type_2}<${bound_type}> = ${lower}${'...' if closed_2 else '..<'}${upper}
                %     if lower == 11 and upper == 11:
                %         contained = not closed_2 
                %     elif lower < 2:
                %         contained = False
                %     elif upper < 7:
                %         contained = True
                %     elif upper == 7:
                %         if closed_1:
                %             contained = True
                %         elif closed_2:
                %             contained = False
                %         else:
                %             contained = True
                %         end
                %     elif upper == 8:
                %         if closed_1 and not closed_2 and bound_type == 'Int':
                %             contained = True
                %         else:
                %             contained = False
                %         end
                %     elif upper >= 9:
                %         contained = False
                %     else:
                %         raise Exception('Never reaches here.')
                %     end
                XCTAssert${'True' if contained else 'False'}(a.contains(b))
                %
                %     if 'Countable' in range_type_2:
                XCTAssert${'True' if contained else 'False'}(b.reduce(true) { $0 && a.contains($1) })
                %     elif bound_type == 'Int':
                XCTAssert${'True' if contained else 'False'}(${'Countable' + range_type_2}(b).reduce(true) { $0 && a.contains($1) })
                %     end
            }
        %         end
        %     end
        }
        % end
    }
    % end

    static var allTests = [
        % for range_type in range_types:
        ("test${range_type}Contains", test${range_type}Contains),
        % end
    ]
}
